pwd Nos muestra la carpeta raiz

ls -al  Nos muestra archivos ocultos

cat Nos muestra lo que contiene un archivo Ejemplo  cat vacio.txt

mkdir  Crea carpetas  Ejemplo  mkdir Proyecto

touch Nos crea archivos  Ejemplo  touch vacio.txt

history  Nos muestra el historial de comandos que hemos usado en consola

Si quiero repetir el comando usado en histori solo agrego el numero de comando asi   !28

rm para remover o eliminar archivos  Ejemplo  rm vacio.txt
rm -r Practicando  Este comando elimina carpetas

rm --help  Nos muestra opciones de comandos

PARA CREAR UN REPOSITORIO EN GIT
git init   Esto debe hacerse en la carpeta raiz la carpeta quedara oculta pero ahi esta

code  Abre Visual Studio Code

git status    Sirve para mostrar el estatus de git si hay cambios pendientes

git add     Sirve para agregar archivos al cache del repositorio EJEMPLO git add historia.txt
y me muestra en verde
git commit -m "primer cambio realizado"      Esto realiza el cambio despues de hacer el add

git rm  --cached    Para sacar el archivo del repositorio Ejemplo  git rm  --cached historia.txt

CONFIGURACION DE USUARIO EN GIT

git config  Es para ver todas las configuraciones PERO tenemos que estar en el home de git
EJEMPLO      Wilson Vásquez@hp MINGW64 ~
git config --list  --show-origin  Muestra las ubicaciones donde se an realizado los cambios
git config -l  con este comando podemos ver el nombre de usuario o correo de usuario en nuestro git local

git config --global user.name "Wilson Vásquez"      Esto es para configurar el nombre en git
git config --global user.email "wilson.v16@hotmail.com"   Configuramos el coreo
git config --list muestra la configuracion que hemos creado

*** PARA MOSTRAR LOS CAMBIOS **
git log  Para visualizar  todos los commit   Ejemplo  git log historia.txt tambien podemos hacerlo solo con git log
git log --stat  Tambien nos muestra todo el detalle de los cambios ccomo las veces que se a modificado
git show   Nos muestra en verde que cambios se realizaron EJ git show historia.txt o Solo git show

**  AGREGANDO CAMBIOS **
abrimos el editor EJ code historia.txt   Y empezamos agregar cambio
git add .   Agrega el cambio si es solo un archivo lo correcto es ponerle el nombre del archivo git add historia.txt
git commit  Realiza el cambio pero si no le agregamos mensaje nos arroja una alerta EJ  git commit
lo correcto seria asi   git commit -m "primer cambio realizado"
git diff Nos muestra la diferencia de un cambio a otro  copiando el commit de cada cambio
EJ  git diff 7aadbae13419814dda9217da56320b5737d5b2be 0a09cde91430857cdfc2041ef05f7a97345b1bea
git diff   Tambien se puede usar solo para ver los cambios  en todo el directorio
git commit -am " "  Esto realiza el add y el commit si los archivos ya le hemos hecho add una vez sino no funciona

** VOLVER A UNA VERSION ANTERIOR DEL REPOSITORIO**
git reset  Nos permite volver a una version anterior asi  git reset ab82953ad8b4179ef9c7709afbb09fd611d461e8
git reset ab82953ad8b4179ef9c7709afbb09fd611d461e8 --hard Todo vuelve a la version anterior + se usa
git reset ab82953ad8b4179ef9c7709afbb09fd611d461e8 --soft  solo vuelve a la version anterior lo que esta en add

** PARA VER COMO ERA EL ARCHIVO ANTES**
git checkout  7aadbae13419814dda9217da56320b5737d5b2be historia.txt
Aqui agregamos el primer commit adjunto al checkout y el nombre del archivo para ver como era antes
git checkout master historia.txt   Esto nos devuelve el archivo master original

**CREAR UNA RAMA **
git branch cabecera   S e crea la rama cabecera en el master
git show Nos muestra que hay una rama cabecera en el head del Master
git status Nos dice que seguimos en la rama master
git checkout cabecera Nos pasamos a la rama cabecera  entonces Ya no estamos en la rama  master
Estando alli podemos modificar los archivos  --Agregar -- Hacer commit
PERO al pasar  a la rama master los cambios que que agregamos se quedan solo en es rama no en el master
git checkout master
git log  Buscamos y el ultimo commit es el creado en la rama master
**UNIENDO LA RAMA CABECERA AL MASTER CON MERGE **
git checkout master  posicionados en el master unimos la cabecera al master
git merge cabecera -m "finalizando el merge"   Esto une los cambios de la cabecera y en la rama master
para ello tenemos que estar ubicados en el master

**UNIENDO LA RAMA MASTER A LA CABECERA CON MERGE **
git checkout cabecera
git merge master   AHORA ya tenemos unidas las 2 ramas en master y en cabecera

*** MI BLOG EN GIT*

https://github.com/wrvp-1/hyperblog

https://github.com/wrvp-1/CursoGitHub

** CREAR UN REPOSITORIO REMOTO*
git checkout master  Nos posicionamos en el master
git remote add origin https://github.com/wrvp-1/hyperblog.git   LUEGO enter despues de pegar la url
git remote Consultamos y aparece origin  Recordar que origin puede ser cualquier palabra que usemos para
Identificar el repositorio que bamos a crear
git remote -v  Sig. sea verbal  nos muestra   que tenemos un origin para traer y enviar
**SUBIMOS LOS ARCHIVOS A GIT REMOTO**
git pull origin master Traemos el master del remoto al nuestro
git pull origin master --allow-unrelated-histories  Traemos a obligacion todo sino nos deja
git push origin master
git push Para enviar todos los cambios del head al repositorio remoto
$ git remote rm origin ** Para eliminar un repo remoto de nuestro repo local ojo no se elimina el remoto como tal solo de nuestro repo local


** DESPUES MODIFICO MIS ARCHIVOS DESDE EL REPOSITORIO REMOTO*
En mi repositorio remoto le doy editar al final agrego el comentario y agrego el commit
ahora agrego los cambios a mi repositorio local
ASI Ejemplos
git pull origin master
git pull wilson cabecera

git fetch trae de vuelta lo que enviamos ar repositorio remoto al repos local cuando hay problemas

**CREANDO UNA LLAVE PUBLICA Y PRIVADA EN GIT**
ssh  Es un protocolo de coneccionm remota a otros servidores

ssh-keygen -t rsa -b 4096 -C "wilson.v16@hotmail.com"   damos enter Y aparecera algo asi
Enter file in which to save the key (/c/Users/usuario/.ssh/id_rsa):   Damos enter xq es la carpeta oculta donde
se guardara la contraseña la carpeta .ssh
Despues podemos teclear una contraseña o solamente con un enter se crea una automatica y nos aparecera
Un recuadro indicando que la clave si es real
/c/Users/usuario/.ssh/id_rsa  Esta es la ubicacion de nuestra contraseña la podemos verificar
cd ~/.ssh/  Aparece la clabe publica y privada
ls -al

**DESPUES VERIFICAMOS QUE ESTE CORRIENDO EL SERVIDOR**
eval $(ssh-agent -s)   Y Damos enter y nos da un numero que dice que el cervidor de ssh esta corriendo


 ** AGREGANDO LA CONTRASEÑA AL SISTEMA**
Recordemos que tenemos que estar en el home de git  Y Agreguemos la clave privada que es la rsa y no la bublica que es la que termian en .pub
ssh-add ~/.ssh/id_rsa   ENTER  Finalizamos ya agregamos la contraseña al sistema

***AGREGAMOS LA CLAVE PUBLICA  AL REPOSITORIO REMOTO***
Es necesario que por cada laptop tengamos una llave distinta
Abrimos la carpeta .ssh y abrimos el archivo de la clave publica 
$ code id_rsa.pub
copiamos la clave publica
Abrimos en el navegador el repositorio remoto
seleccionamos settings en la parte derecha donde aparece el icono
seleccionamos SSH and GPG keys
seleccionamos new SSH key
agregamos un titulo a que se refiere ese repositorio o equipo Ej Laptop de educacion platzi
en el campo de abajo pegamos la clave
seleccionamos Add SSH key
si nos pide contraseña de git lo agregamos sino ya esta

**¨CAMBIAMOS EL LINK DEL REPO REMOTO DE http **
me ire a otro repo que tengo Hyperblog
seleccionamos code ó clone or download
 LOS QUE SIGUE ESTA EN WORD EN CAPTURAS




